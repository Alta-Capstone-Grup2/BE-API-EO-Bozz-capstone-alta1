openapi: 3.0.0
info:
  description: |
    Document Open API EO-Bozz
  version: "1.0.0"
  title: EO-Bozz
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license: 
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: Base URL Server GCP
    url: https://irisminty.my.id/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/YUSNARSETIYADI150403_1/EO-Bozz/1.0.0
  - description: BE servers
    url: https://{environment}.api.alta.id
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: Auth
    description:  API mengelola fitur Auth
  - name: Users 
    description: API mengelola fitur User  
  - name: Clients
    description:  API mengelola fitur Client
  - name: Partners
    description:  API mengelola fitur Partners
  - name: Services
    description:  API mengelola fitur Services
  - name: Additionals
    description:  API mengelola fitur Additionals
  - name: Orders
    description: API mengelola fitur Orders
  - name: Reviews
    description: API mengelola fitur Reviews
  - name: Discussions
    description: API mengelola fitur Discussions


paths:

### Endpoint Auth
  /login:
    post:
      summary: "Login User"
      tags:
      - "Auth"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/RequestLogin"
            example:
              email: "budi123@gmail.com"
              password: "123"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "Login Success"
                data:
                  id: 1
                  name: "Budiman"
                  email: "budi123@gmail.com"
                  role: "User"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2NzAwMzYwMjcsInJvbGUiOiJ1c2VyIiwidXNlcklkIjoxfQ.pT-FmSraUUb8HY73ofYbbt3vFgbej0XaHP9VMas8Q44"
        "400" :
          $ref : "#/components/responses/400"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Users
  /users:
    post:
      tags:
        - Users
      summary: "Create User" 
      description: "Register User for Client or Partner, Role Admin (Hardcode) "
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestUser"
            example:
              name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Users
      summary: "Get All Users"
      description: "Get all users"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all users"
                  data:
                    - id: 1
                      name: "Budiman"
                      email: "budi123@gmail.com"
                      role: "Admin"
                    - id: 2
                      name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      role: "Admin"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    put:
      tags:
        - Users
      summary: "Update User"
      description: "Update User currently logged in"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RequestUser"
            example:
              name: "Budiman"
              email: "budi123@gmail.com"
              password: "123"
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Users
      summary: "Delete User"
      description: "Delete User currently logged in"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /users/{id}:
    get:
      tags:
        - Users
      summary: "Get User by Id"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    name: "Jasiman"
                    email: "Jasiman123@gmail.com"
                    role: "User"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /users/password:
    put:
      tags:
        - Users
      summary: "Update password User"
      description: "Update password User currently logged in"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RequestUser"
            example:
              old_password: "123"
              new_password: "456"
      responses:
        '200':
          description: "Success password update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update password user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

        
### Enpoint Client
  /clients:
    post:
      tags:
        - Clients
      summary: "Create Client" 
      description: "Register Client with Role = Client."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RequestClient"
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "client successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Clients
      summary: "Get All Clients And Search by name"
      description: "Get all Clients and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "nama user"
          required: false
          in: query
          schema:
            type: string
            example: "budiman"
      responses:
        '200':
          description: A list of clients
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all clients"
                  data:
                    - id: 1
                      name: "Budiman"
                      email: "budi123@gmail.com"
                      gender: "laki-laki"
                      address: "tangerang"
                      phone: "08123"
                      city: "tangerang"
                      client_image_file: "image.jpg"
                    - id: 2
                      name: "Jasiman"
                      email: "Jasiman123@gmail.com"
                      gender: "laki-laki"
                      address: "tangerang"
                      phone: "08123"
                      city: "tangerang"
                      client_image_file: "image.jpg"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    put:
      tags:
        - Clients
      summary: "Update Client"
      description: "Update Client currently logged in"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RequestClient"
      responses:
        '200':
          description: "Success update Client"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update client."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Clients
      summary: "Delete Client"
      description: "Delete Client currently logged in"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Delete Client."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete client"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /clients/{id}:
    get:
      tags:
        - Clients
      summary: "Get Client by Id"
      description: "Get data client using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id client to get data"
          required: true
          in: path
          schema:
            description: "Id client 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get Client by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get Client by Id"
                  data:
                      id: 1
                      name: "Budiman"
                      email: "budi123@gmail.com"
                      gender: "laki-laki"
                      address: "tangerang"
                      city: "tangerang"
                      phone: "08123"
                      client_image_file: "image.jpg"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /clients/orders:
    get:
      tags:
        - Clients
      summary: "Get Client orders by id"
      description: "Get data client order using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Get Client orders by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get Client orders by Id"
                  data:
                      id: 1
                      event_name: "wedding"
                      start_date: "2022-12-27"
                      end_date: "2022-12-29"
                      event_location: "jakarta"
                      services_name: "wedding jawa"
                      gross_ammount: 1000000
                      order_status: "order confirmed"
                      services_id: 1
                      client_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Partners
  /partners:
    post:
      tags:
        - Partners
      summary: "Create Partner" 
      description: "Register Partner with Role = Partner."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RequestPartner"
      responses:
        '201':
          description: "Success Create Partner"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Partner successfully registration" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Partners
      summary: "Get All Partner And Search by name"
      description: "Get all Partner and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "company name"
          required: false
          in: query
          schema:
            type: string
            example: "budiman-EO"
      responses:
        '200':
          description: A list of partner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all partners"
                  data:
                    - user_id: 1
                      name: "Budiman"
                      company_name: "budiman-EO"
                      created_at: "2022-12-29"
                      verification_status: "not verified"
                    - user_id: 2
                      name: "Jasiman"
                      company_name: "jasiman-EO"
                      created_at: "2022-12-29"
                      verification_status: "not verified"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    put:
      tags:
        - Partners
      summary: "Update Partner"
      description: "Update Partner currently logged in"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RequestUpdatePartner"
      responses:
        '200':
          description: "Success update Partner"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update partner."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Partners
      summary: "Delete Partner"
      description: "Delete Partner currently logged in"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Delete Partner."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete partner"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /partners/{id}:
    get:
      tags:
        - Partners
      summary: "Get Partner by id"
      description: "Get all Partner and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id partner to get data"
          required: true
          in: path
          schema:
            description: "Id partner 1"
            type: integer
            example: 1
      responses:
        '200':
          description: A data of partner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get partner by id"
                  data:
                    user_id: 1
                    name: "budiman"
                    email: "budiman@gmail.com"
                    company_name: "budiman pabrik"
                    company_phone: "08123131"
                    company_city: "tng"
                    company_image: "image.png"
                    company_address: "jkt"
                    link_website: "blablabla.com"
                    pic_position: "owner"
                    pic_phone: "08988989"
                    pic_address: "papua"
                    nib_number: "988798988"
                    nib_image: "image.png"
                    siup_number: "746324"
                    siup_image: "image.jpg"
                    event1_name: "weding"
                    event1_image: "image.jpg"
                    event2_name: "pernikahan"
                    event2_image: "image.jpg"
                    event3_name: "kawinan"
                    event3_image: "image.jpg"
                    bank_name: "bca"
                    bank_account_number: "27767462736"
                    bank_account_name: "budiman"
                    verification_status: "not verified"
                    verification_log: "revisi again yaa."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /partners/orders/{id}/confirm:
    put: 
      tags:
        - Partners
      summary: "Confirm order" 
      description: "Confirm Partner for partner by id"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestPartnerOther"
            example:
              order_status: "order confirmed"
      responses:
        '201':
          description: "Success Create confirm order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "confirm order successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /partners/services:
    get:
      tags:
        - Partners
      summary: "Get Partner service by id"
      description: "Get data partner service using id partner at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Get Partner service by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get partner service by Id"
                  data:
                      - id: 1
                        service_name: "wedding jawa"
                        service_category: "wedding"
                        service_price: 20000000
                        average_rating: "****"
                        service_image_url: "image.jpg"
                        city: "tangerang"
                        partner_id: 1
                      - id: 2
                        service_name: "wedding jawa"
                        service_category: "wedding"
                        service_price: 20000000
                        average_rating: "****"
                        service_image_url: "image.jpg"
                        city: "tangerang"
                        partner_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
        
  /partners/orders:
    get:
      tags:
        - Partners
      summary: "Get Partner order by id"
      description: "Get data partner order using id partner at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Get Partner order by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get partner order by Id"
                  data:
                      - id: 1
                        event_name: "wedding"
                        start_date: "2022-12-27"
                        end_date: "2022-12-29"
                        event_location: "jakarta"
                        services_name: "wedding jawa"
                        gross_ammount: 1000000
                        order_status: "order confirmed"
                        services_id: 1
                        client_id: 1
                      - id: 2
                        event_name: "wedding"
                        start_date: "2022-12-27"
                        end_date: "2022-12-29"
                        event_location: "jakarta"
                        services_name: "wedding jawa"
                        gross_ammount: 1000000
                        order_status: "order confirmed"
                        services_id: 1
                        client_id: 2
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /partners/additionals:
    get:
      tags:
        - Partners
      summary: "Get Partner Additionals service by id"
      description: "Get data partner additional service using id partner at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Get Partner additional service by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get partner additional service by Id"
                  data:
                      id: 1
                      additional_name: "catering"
                      additional_price: 3000000
                      partner_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /partners/register:
    get: 
      tags:
        - Partners
      summary: "Get Partner register s"
      description: "Get list partner register"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of partner registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all partners"
                  data:
                    - user_id: 1
                      company_name: "budiman-EO"
                      name: "budiman"
                      created_at: "2022-12-29"
                      verification_status: "not verified"
                    - user_id: 2
                      company_name: "jasiman-EO"
                      name: "jasiman"
                      created_at: "2022-12-29"
                      verification_status: "not verified"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /partners/{id}/register:
    get:
      tags:
        - Partners
      summary: "Get Partner register by id"
      description: "Get partner register using id partner at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id partner to get data"
          required: true
          in: path
          schema:
            description: "Id partner 1"
            type: integer
            example: 1
      responses:
        '200':
          description: A list of partner register
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get partners register"
                  data:
                    user_id: 1
                    name: "Budiman"
                    email: "budi123@gmail.com"
                    company_name: "budiman-EO"
                    company_city: "jakarte"
                    verified_status: "not verified"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /partners/verify:
    put:
      tags:
        - Partners
      summary: "Update Partner status verify"
      description: "Update Partner status verify"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RequestPartnerOther"
            example:
              verify_log: "revision your data"
              status: "verified"
              partner_id: 1
      responses:
        '200':
          description: "Success update status Partner"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update status partner."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Service
  /services:
    post:
      tags:
        - Services
      summary: "Create Services" 
      description: "Create service."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RequestService"
      responses:
        '201':
          description: "Success Create service"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "service successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Services
      summary: "Get All service, Search by name and filter"
      description: "Get all service and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "service name"
          required: false
          in: query
          schema:
            type: string
            example: "wedding javva"
        - name: category
          description: "service name"
          required: false
          in: query
          schema:
            type: string
            example: "wedding"
        - name: min price
          description: "min price"
          required: false
          in: query
          schema:
            type: integer
            example: 200000
        - name: max price
          description: "max price"
          required: false
          in: query
          schema:
            type: integer
            example: 2000000
      responses:
        '200':
          description: A list of service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all service"
                  data:
                    - id: 1
                      service_name: "wedding javva"
                      servoce_category: "wedding"
                      service_price: 50000000
                      average_rating: "*****"
                      service_image_url: "image.jpg"
                      city: "jakarte"
                      partner_id: 1
                    - id: 2
                      service_name: "wedding javva"
                      servoce_category: "wedding"
                      service_price: 50000000
                      average_rating: "*****"
                      service_image_url: "image.jpg"
                      city: "jakarte"
                      partner_id: 2
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /services/{id}:
    get:
      tags:
        - Services
      summary: "Get service by id"
      description: "Get service by id"
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
      responses:
        '200':
          description: detail of service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get service by id"
                  data:
                    id: 1
                    service_name: "wedding javva"
                    servoce_category: "wedding"
                    service_price: 50000000
                    average_rating: "*****"
                    service_image_url: "image.jpg"
                    city: "jakarte"
                    partner_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    put:
      tags:
        - Services
      summary: "Update service by id"
      description: "Update service using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RequestService"
      responses:
        '200':
          description: "Success update service"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update service."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Services
      summary: "Delete service"
      description: "Delete service using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete service."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete service"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
        
  /services/{id}/additionals:
    post:
      tags:
        - Services
      summary: "connect additional to service"
      description: "conect to service"
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RequestServiceOther"
            example:
              service_id: 1
              additionals:
                - additional_id: 1
                - additional_id: 2
      responses:
        '200':
          description: "Success connect to service"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success connect to service."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Services
      summary: "get service additional by id"
      description: "get service additional using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
      responses:
        '200':
          description: A list of service additional
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all service additional"
                  data:
                      - id: 1
                        name: "catering"
                        price: 50000
                        service_id: 1
                        additional_id: 1
                      - id: 2
                        name: "catering"
                        price: 50000
                        service_id: 1
                        additional_id: 2
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /services/{id}/reviews:
    get:
      tags:
        - Services
      summary: "get service Reviews by id"
      description: "get service Reviews using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
      responses:
        '200':
          description: A list of service Reviews
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all service reviews"
                  data:
                      - id: 1
                        rating: "*****"
                        review: "blablablabalbalbalbalablabal"
                        order_id: 1
                        client_id: 1
                        service_id: 1
                      - id: 2
                        rating: "*****"
                        review: "blablablabalbalbalbalablabal"
                        order_id: 2
                        client_id: 2
                        service_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /services/{id}/discussions:
    get:
      tags:
        - Services
      summary: "get service Discussions by id"
      description: "get service Discussions using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
      responses:
        '200':
          description: A list of service Discussions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all service discussions"
                  data:
                      - id: 1
                        comment: "lorem ipsum blablablaaaa"
                        created_at: "2022-12-29 00:00:00"
                        partner_id: 1
                        client_id: 1
                        service_id: 1
                      - id: 2
                        comment: "lorem ipsum blablablaaaa"
                        created_at: "2022-12-29 00:00:00"
                        partner_id: 2
                        client_id: 2
                        service_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /services/{id}/availbility:
    post:
      tags:
        - Services
      summary: "check service availbility by id"
      description: "get service availbility using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id service to get data"
          required: true
          in: path
          schema:
            description: "Id service 1"
            type: integer
            example: 1
        - name: start_date
          description: "start date "
          required: true
          in: path
          schema:
            description: "start date"
            type: string
            example: 2022-12-21
        - name: end_date
          description: "end date "
          required: true
          in: path
          schema:
            description: "end date"
            type: string
            example: 2022-12-24
      responses:
        '200':
          description: answer check availbility
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "services currently available"
                  data: 
                    service_name: "wedding java"
                    start_date: "2022-12-25"
                    end_date: "2022-12-29"
                    availbility_status: "available"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Additionals
  /additionals:
    post:
      tags:
        - Additionals
      summary: "Create additionals" 
      description: "Create additionals."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestAdditional"
            example:
              name: "catering"
              price: 50000000
              partner_id: 1
      responses:
        '201':
          description: "Success Create additionals"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "additionals successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Additionals
      summary: "Get All additionals"
      description: "Get all additionals"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of additional
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all additionals"
                  data:
                    - id: 1
                      name: "catering"
                      price: 50000000
                      additional_type: "wedding"
                      partner_id: 1
                    - id: 2
                      name: "make up"
                      price: 50000000
                      additional_type: "wedding"
                      partner_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /additionals/{id}:
    put:
      tags:
        - Additionals
      summary: "Update additionals by id"
      description: "Update additionals using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id additionals to get data"
          required: true
          in: path
          schema:
            description: "Id additionals 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RequestAdditional"
            example:
              name: "catering"
              price: 50000000
              partner_id: 1
      responses:
        '200':
          description: "Success update additional"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update additional."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Additionals
      summary: "Delete additional"
      description: "Delete additional using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id additional to get data"
          required: true
          in: path
          schema:
            description: "Id additional 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete additional."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete additional"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Orders
  /orders:
    post:
      tags:
        - Orders
      summary: "Create order" 
      description: "Create order."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestOrder"
            example:
              event_name: "wedding"
              start_date: "2022-12-25"
              end_date: "2022-12-19"
              event_location: "jakarta"
              event_address: "jl. rawa buata"
              note_for_partner: "thnks"
              payment_method: "cod"
              client_id: 1
              service_id: 1
              additionals:
                - additional_id: 1
                  qty: 2
                - additional_id: 2
                  qty: 4
      responses:
        '201':
          description: "Success Create order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "order successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Orders
      summary: "Get All order And Search by name"
      description: "Get all order and can use query parameter to search. Input using lowercase"
      security:
        - JWTAuth: []
      parameters:
        - name: ""
          description: "No value in parameter."
          required: false
          in: query
          schema:
            type: string
            example: ""
        - name: name
          description: "service name"
          required: false
          in: query
          schema:
            type: string
            example: "wedding"
      responses:
        '200':
          description: A list of order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all order"
                  data:
                    - event_name: "wedding"
                      start_date: "2022-12-25"
                      end_date: "2022-12-19"
                      event_location: "jakarta"
                      services_name: "weddig java"
                      gross_ammount: 20000000
                      order_status: "order confirmed"
                      client_id: 1
                      service_id: 1
                    - event_name: "wedding"
                      start_date: "2022-12-25"
                      end_date: "2022-12-19"
                      event_location: "jakarta"
                      services_name: "weddig java"
                      gross_ammount: 2200000000
                      client_id: 2
                      service_id: 2
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: "get order by id"
      description: "get order using id order at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id order to get data"
          required: true
          in: path
          schema:
            description: "Id order 1"
            type: integer
            example: 1
      responses:
        '200':
          description: order detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get order by id"
                  data:
                    id: 1
                    event_name: "wedding"
                    start_date: "2022-12-25"
                    start_time: "00:00:00"
                    end_date: "2022-12-19"
                    end_time: "00:00:00"
                    event_location: "jakarta"
                    event_address: "jl. rawa buata"
                    note_for_partner: "thnks"
                    services_name: "weddig java"
                    services_price: 2200000000
                    gross_ammount: 200000000000
                    payment_method: "cod"
                    order_status: "order confirmed"
                    payout_data: 666464466
                    payout_reciept_url: "image.jpg"
                    client_id: 1
                    service_id: 1
                    additionals:
                      - additional_name: "makeup"
                        additional_price: 20000
                        qty: 2
                        detail_order_total: 2
                        order_id: 1
                      - additional_name: "caterng"
                        additional_price: 20000
                        qty: 2
                        detail_order_total: 2
                        order_id: 1
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Orders
      summary: "Update order by id"
      description: "Update order using id order at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id order to get data"
          required: true
          in: path
          schema:
            description: "Id order 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RequestOrder"
            example:
              order_id: 1
              status: "cancel"
      responses:
        '200':
          description: "Success update order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update order."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /orders/{id}/payout:
    put:
      tags:
        - Orders
      summary: "Update status payout"
      description: "Update status payout using id order at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id order to get data"
          required: true
          in: path
          schema:
            description: "Id order 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
                $ref: "#/components/schemas/RequestOrderPayout"
      responses:
        '200':
          description: "Success update order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update order."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Reviews
  /reviews:
    post:
      tags:
        - Reviews
      summary: "Create review" 
      description: "Create reviews."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestReview"
            example:
              review: "blbalalablbalablablab"
              rating: "*****"
              order_id: 1
              service_id: 1
              client_id: 1
      responses:
        '201':
          description: "Success Create review"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "review successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Reviews
      summary: "Get All review"
      description: "Get all review"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: A list of review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all review"
                  data:
                    - id: 1
                      review: "blbalalablbalablablab"
                      rating: "*****"
                      order_id: 1
                      service_id: 1
                      client_id: 1
                    - id: 2
                      review: "blbalalablbalablablab"
                      rating: "*****"
                      order_id: 1
                      service_id: 2
                      client_id: 2
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  /reviews/{id}:
    put:
      tags:
        - Reviews
      summary: "Update review by id"
      description: "Update review using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id review to get data"
          required: true
          in: path
          schema:
            description: "Id review 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RequestReview"
            example:
              review: "blbalalablbalablablab"
              rating: "*****"
              order_id: 1
              service_id: 1
              client_id: 1
      responses:
        '200':
          description: "Success update review"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update review."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Reviews
      summary: "Delete review"
      description: "Delete review using id service at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id review to get data"
          required: true
          in: path
          schema:
            description: "Id review 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete review."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete review"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint Discussions
  /discussions:
    post:
      tags:
        - Discussions
      summary: "Create discussions" 
      description: "Create dicussions."
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestDiscussion"
            example:
              comment: "lorem ipsum blablabla"
              created_at: "2022-12-25 00:00:00"
              partner_id: 1
              client_id: 1
              service_id: 1
      responses:
        '201':
          description: "Success Create discussions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "discussions successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    get:
      tags:
        - Discussions
      summary: "Get All discussions"
      description: "Get all dicuissions"
      security:
        - JWTAuth: []
      responses:
        '200':
          description: all discussions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success get all discussions"
                  data:
                    - id: 1
                      comment: "lorem ipsum blablabla"
                      created_at: "2022-12-25 00:00:00"
                      partner_id: 1
                      client_id: 1
                      service_id: 1
                    - id: 2
                      comment: "lorem ipsum blablabla"
                      created_at: "2022-12-25 00:00:00"
                      partner_id: 1
                      client_id: 2
                      service_id: 2
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Discussions
      summary: "Delete discussions"
      description: "Delete discussions using id service at path parameter."
      security:
        - JWTAuth: []
      responses:
        '200':
          description: "Success Delete discussions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete discussions"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


### Endpoint City
  /city:
    get:
      tags:
        - City
      summary: "View All City" 
      description: "View All City"
      security:
        - JWTAuth: []
      responses:
        '201':
          description: "Success view all city"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                status: "Success"
                message: "successfully view all city" 
                data:
                  id: 1
                  city_name: "jakarta"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"


####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Token that generate after login."

  schemas:
### Auth Schemas
    "RequestLogin":
      type: object
      properties:
        "email":
          type: string
        "password":
          type: string

### User Schemas
    "RequestUser":
      type: object
      properties:
        "name":
          type: string
        "email":
          type: string
        "password":
          type: string
        "old_password":
          type: string
        "new_password":
          type: string

### Client Schemas
    "RequestClient":
      type: object
      properties:
        name: 
          type: string
        email:
          type: string
        password:
          type: string
        gender:
          type: string
        address:
          type: string
        city:
          type: string
        phone:
          type: string
        client_image_file: 
          type: string
          format: binary

### Partner Schemas
    "RequestPartner":
      type: object
      properties:
        name: 
          type: string
        email: 
          type: string
        password: 
          type: string
        company_name: 
          type: string
        company_phone:
          type: string
        company_city:
          type: string
        company_image:
          type: string
          format: binary
        company_address:
          type: string
        link_website:
          type: string
        pic_position:
          type: string
        pic_phone:
          type: string
        pic_address:
          type: string
        nib_number:
          type: string
        nib_image:
          type: string
          format: binary
        siup_number:
          type: string
        siup_image:
          type: string
          format: binary
        event1_name:
          type: string
        event1_image:
          type: string
          format: binary
        event2_name:
          type: string
        event2_image:
          type: string
          format: binary
        event3_name:
          type: string
        event3_image:
          type: string
          format: binary
        bank_name:
          type: string
        bank_account_number:
          type: string
        bank_account_name:
          type: string

    "RequestUpdatePartner":
      type: object
      properties:
        name: 
          type: string
        email: 
          type: string
        password: 
          type: string
        company_name: 
          type: string
        company_phone:
          type: string
        company_city:
          type: string
        company_image:
          type: string
          format: binary
        company_address:
          type: string
        link_website:
          type: string
        pic_position:
          type: string
        pic_phone:
          type: string
        pic_address:
          type: string
        nib_number:
          type: string
        nib_image:
          type: string
          format: binary
        siup_number:
          type: string
        siup_image:
          type: string
          format: binary
        event1_name:
          type: string
        event1_image:
          type: string
          format: binary
        event2_name:
          type: string
        event2_image:
          type: string
          format: binary
        event3_name:
          type: string
        event3_image:
          type: string
          format: binary
        bank_name:
          type: string
        bank_account_number:
          type: string
        bank_account_name:
          type: string

    "RequestPartnerOther":
      type: object
      properties:
        other:
          type: string

### Service Schemas
    "RequestService":
      type: object
      properties:
        service_name:
          type: string
        service_deacription:
          type: string
        servoce_category:
          type: string
        service_price:
          type: integer
        average_rating: 
          type: string
        service_image_url:
          type: string
          format: binary
        city:
          type: string

    "RequestServiceOther":
      type: object
      properties:
        other:  
          type: string

### Additional Schemas
    "RequestAdditional":
      type: object
      properties:
        other:
          type: string

### Order Schemas
    "RequestOrder":
      type: object
      properties:
        other:
          type: string

    "RequestOrderPayout":
      type: object
      properties:
        transfer_reciept_file:
          type: string
          format: binary

### Review Schemas
    "RequestReview":
      type: object
      properties:
        other:
          type: string

### Discussion Schemas
    "RequestDiscussion":
      type: object
      properties:
        other:
          type: string

### Other Schemas
    "ResponseWithoutData":
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    "ResponseWithData":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: object


### Responses Schemas
  responses:
    '200':
      description: "Success Process Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '201':
      description: "Success Create Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '400':
      description: "Wrong Request From User"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check your input."
    '401':
      description: "Authorization information is missing or invalid."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '404':
      description: "Page not found or wrong url. Please check again."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '500':
      description: "Error process on server"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check server."