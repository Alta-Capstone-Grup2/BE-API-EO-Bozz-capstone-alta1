// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	client "capstone-alta1/features/client"

	mock "github.com/stretchr/testify/mock"
)

// ClientRepository is an autogenerated mock type for the RepositoryInterface type
type ClientRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *ClientRepository) Create(input client.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: clientID, userID
func (_m *ClientRepository) Delete(clientID uint, userID uint) error {
	ret := _m.Called(clientID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(clientID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUser provides a mock function with given fields: email
func (_m *ClientRepository) FindUser(email string) (client.Core, error) {
	ret := _m.Called(email)

	var r0 client.Core
	if rf, ok := ret.Get(0).(func(string) client.Core); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(client.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: query
func (_m *ClientRepository) GetAll(query string) ([]client.Core, error) {
	ret := _m.Called(query)

	var r0 []client.Core
	if rf, ok := ret.Get(0).(func(string) []client.Core); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ClientRepository) GetById(id uint) (client.Core, error) {
	ret := _m.Called(id)

	var r0 client.Core
	if rf, ok := ret.Get(0).(func(uint) client.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(client.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: id
func (_m *ClientRepository) GetOrderById(id uint) ([]client.Order, error) {
	ret := _m.Called(id)

	var r0 []client.Order
	if rf, ok := ret.Get(0).(func(uint) []client.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, clientID, userID
func (_m *ClientRepository) Update(input client.Core, clientID uint, userID uint) error {
	ret := _m.Called(input, clientID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.Core, uint, uint) error); ok {
		r0 = rf(input, clientID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCompleteOrder provides a mock function with given fields: input, orderId, clientId
func (_m *ClientRepository) UpdateCompleteOrder(input client.Order, orderId uint, clientId uint) error {
	ret := _m.Called(input, orderId, clientId)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.Order, uint, uint) error); ok {
		r0 = rf(input, orderId, clientId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClientRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientRepository creates a new instance of ClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientRepository(t mockConstructorTestingTNewClientRepository) *ClientRepository {
	mock := &ClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
