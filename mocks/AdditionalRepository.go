// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	additional "capstone-alta1/features/additional"

	mock "github.com/stretchr/testify/mock"
)

// AdditionalRepository is an autogenerated mock type for the RepositoryInterface type
type AdditionalRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *AdditionalRepository) Create(input additional.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(additional.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *AdditionalRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *AdditionalRepository) GetAll() ([]additional.Core, error) {
	ret := _m.Called()

	var r0 []additional.Core
	if rf, ok := ret.Get(0).(func() []additional.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]additional.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *AdditionalRepository) Update(input additional.Core, id uint) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(additional.Core, uint) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdditionalRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdditionalRepository creates a new instance of AdditionalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdditionalRepository(t mockConstructorTestingTNewAdditionalRepository) *AdditionalRepository {
	mock := &AdditionalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
